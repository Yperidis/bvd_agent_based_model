; ;  This ini file defines the behaviour of our simulation. Almost all properties of the system can be set here withoud modifying the code itself
; ;  Wherever default values are mentioned, it means that commenting them out in this ini file should result in exactly those values being assumed
; ;  in the simulation (hard-coded).

; Mostly self-explanatory (beginning, end, step and output intervals for the simulation). 
; Except for the dt_output field, all the rest should be given a float value.
[simulation]
; The following to lines define the starting time of our system end the end time
t_start=0.0  ;default is 0.
t_end = 5000.0    ;default 1000
dt_log = 5.0  ;default is 1.0
dt_output = 100  ;;default is 100.


; System wide parameters. So far the rndFarms is the default and only mode with which the system runs.
[system]
type=rndFarms
; type=inputFarmFile #not implemented

; For future implementation of a specific network structure for the trade
[input]

; networkfile #not implemented


; In this module initialisation parameters are defined.
[modelparam]
; Initialisation of the population compartments in the PI infected farms. Floats.
; default values (S, T, R, P) = (0.46, 0.06, 0.46, 0.02)
; previnfS=1.
; previnfT=0.
; previnfR=0.
; previnfP=0.

; Initialisation of the population compartments in the PI clean farms. Floats.
; default values (S, T, R, P) = (0.79, 0.005, 0.205, 0.00)
; cleanS=1.
; cleanT=0.
; cleanR=0.
; cleanP=0.

; default: 0.02 #1 equals 100% 0 equals 0%
; Percentage of PIs to be applied on system inputs (trade with the well farm). Float.
populationPercentagePI=0.02

; default: 0.02
; Percentage of TIs to be applied on system inputs (trade with the well farm). Float.
populationPercentageTI=0.0

; default: 0.02 
; This constant defines the percentage of farms, which will obey the farm initialisation
; with a PI percentage greater than zero. Float.
previouslyInfectedPercentageOfFarms = 0.02  ; default 0.02


; default: true
; The first field concerns the constant enforcement of the TI and PI percentages defined above on the
; input animals. The second has a similar effect, with the difference that the PI and TI percentages
; are adjusted with every call of the farm manager according to the system's PI and TI prevalence at the step
; of the call. The numerical values are Boolean. If the PercentagesShallBeAppliedOnWells is false, then
; the incoming animals have a zero percentage of PIs or TIs. However in this case, if the PercentagesShallBeAppliedOnWellsDynamically
; is set to true, a positive PI prevalence could change the value of the incoming PIs from the wells. Therefore, the PercentagesShallBeAppliedOnWellsDynamically
; has to be set to false if no PI entry is desired from the well farm. For an adaptive influx of the PI and TI 
; percentages, both of the keys PercentagesShallBeAppliedOnWells and PercentagesShallBeAppliedOnWellsDynamically have
; to be set to true.
PercentagesShallBeAppliedOnWells=true  ; See CowWellFarmManager.cpp
PercentagesShallBeAppliedOnWellsDynamically=false  ; This feature is still under development and not guaranteed to work as intended (see System.cpp).

; These entries determine the number of farms, slaughterhouses and wells in the simulation.
; If there is a farm size distribution input file, the numberOfFarms entry is overriden and
; determined from the input file. The numberOfAnimals varialbe determines the number of animals to be inserted in the number of farms previously determined.
; Integer values.
; default: 0
numberOfFarms = 1
; default: 0
numberOfSlaughterHouses = 1
; default: 0
numberOfWells = 1

; Integers. Define the minimum, maximum and modulo used to generate the age distribution of the
; initialised animals.
age_dist_min=0  ; default 0
age_dist_max=3000  ; default 3000
age_dist_mod=200  ; default 200


; Defines the limit of usage for the small farm size type (inclusive). Above that limit the simple farm type is generated.
smallFarmSizeMax = 20 ; integer
; The two following fields are filters for the input file's farm size upper and lower limits in animals.
; The two limits are inclusive, e.g. for 10 and 10000 values respectively, farms with less or equal than
; 10 animals and more than 10000 animals will be excluded from the calculations.
farmsize_min = 10 ; integer
farmsize_max = 10000 ; integer
; Here is given the path to the input file size distribution. If the input is in a relative path format, 
; the path must be relative to the simulation's working directory, i.e. where the executable is called from.
; inifileName = /home/jbassett/TU_Berlin/Group_material/BVD_project/AB_code_analysis/Farms_lists/Test_distribution.csv
inifileName = /net/m07/nwg/hoevel_data/Data/HI_Tier_2010-2014/Farms_size_distributions/Betriebsgroessen_TH.csv
; inifileName = /home/jbassett/TU_Berlin/Group_material/BVD_project/AB_code_analysis/Farms_lists/Farm_size_distributions/DE_to_TH.csv
; inifileName = /home/jbassett/TU_Berlin/Group_material/BVD_project/AB_code_analysis/Farms_lists/Farm_size_distributions/RP_to_TH.csv
; inifileName = /home/jbassett/TU_Berlin/Group_material/BVD_project/AB_code_analysis/Farms_lists/Farm_size_distributions/BY_to_TH.csv


; The following two fields determine the introduction of single cows in different farms at different times
inputCows=false
inputCowNum = 1 ; integer

; Introduce here as many identical modules of cows (e.g. [inputCow25] where the suffix 25 would be the 25th cow entry) as you wish.
; The fields refer to the desired target farm minus one for introduction (integer), the cow's age (float), 
; its infection status (see related field in Cow.h), its calf's status (see related structure in Cow.h)
; and its introduction time (integer). Note that the introductiontime field needs to be given in ascending order.
[inputCow1]
farmID = 1
cowAge = 300.
infection_status = PERSISTENTLY_INFECTED
Calf_Status = PERSISTENTLY_INFECTED
introductiontime = 400

; [inputCow2]
; farmID = 2
; cowAge = 250.
; infection_status = PERSISTENTLY_INFECTED
; Calf_Status = NO_CALF
; introductiontime = 500


; This module refers to attributes of the farm manager.
; The first two refer to the threshold which the demand
; must exceed and the offer must not reach for simple and small farms, so as to
; buy and sell cows respectively. The third and fourth likewise, but
; only for offer and demand respectively, as the well and
; slaughterhouse farms act as the source and the drain of 
; the system respectively (regardless of the cow type). The attributes refer to each call 
; and not for the course of the simulation overall. All numerical values must be integers.
; Finally, the attribute "standardOfferingMethod" specifies if there
; is going to be any priority of offers among the different
; trading criteria. Currently implemented "NONE", "OldCowsFirst" and
; "evenlyDistributed".
; 
; Note that the farmsize_min ([modelparam] module) must be greater than the threshold_buy and threshold_sell, 
; in order for all the farms to participate in the trade. Otherwise there will be disconnected nodes in the
; network.
[farmmanager]
; default:20
threshold_buy=0
; default:20
threshold_sell=0
; default:20
numberOfCowsInWell=10000  ;it wouldn't make sense to be more than the maximum population of the farms upon initialisation.
; dumping capacity in a slaughterhouse default:20
dumpingCapacityPerType = 10000
standardOfferingMethod = evenlyDistributed
; OldCowsFirst, NONE

#standardOfferingMethod = OldCowsFirst

; This module refers to the supply and demand of the premises (see the FarmManager.cpp, System.cpp and Market.cpp).
; The field "slaughterHouseType" can be either "dump" or "demand".
; The first registers a demand from the slaughter house, while the
; second deletes it. 
; The three fields "percentage_replacement", "percentage_time" and "tradeRegularity"
; are complementary and all contribute to the calculation of the replacement percentage 
; for the animals of the farm through the formula: replacementPercentage = percentage_replacement * tradeRegularity / percentage_time (essentially the rate of rejuvenation at its time unit times the trading interval).
; The "percentage_replacement" field defines the
; fixed percentage of cows which are going to be calculated for the simple
; and normal farms' demands (accounts for the rejuvenation strategy of all
; the farms). The "percentage_time" field refers to the calculated replacement 
; percentage of the farm over the specified period of time.
; The tradeMode has no effect (not implemented). The "tradeRegularity" field
; makes a nuance to the frequency of trade. It is used for the calculation of 
; the replacement percentage of the farm.
; Finally, the "ignoreTypeOfDemand" field determines whether the 
; market will ignore (true) or not the registered demands by the farm managers.
[trade]
; default:dump
; slaughterHouseType=dump
slaughterHouseType=demand
; default:0.279
percentage_replacement = 0.279 ; should be a float
; default: YEARLY. Others: WEEKLY, MONTHLY, QUARTERLY, HALFYEARLY, YEARLY
percentage_time = YEARLY ; According to Joern should be at the same level as tradeRegularity
; default: regular ;not implemented
tradeMode = regularly
; defualt: DAILY Others: WEEKLY, MONTHLY, QUARTERLY, HALFYEARLY, YEARLY
tradeRegularity = WEEKLY ; According to Joern should be at the same level as percentage_time
; default: false
ignoreTypeOfDemand=true

; This module contains the strategies to be implemented according to the
; simulation plan. The modules following it (adjust to the needs of the simulation plan) are customised according to 
; the following field (see the implementation in BVDSettings.cpp and BVDContainmentStrategy.cpp):
; 
; usesEartag: Boolean
; usesVaccination: Boolean
; usesJungtierFenster: Boolean
; startTime: float (at which time the strategy should start to apply)
; bloodTestAccuracy: float
; retestingTimeBlood: float
; vaccinationWorkingProbability: float
; vaccinationTimeBeforeInsemination: float
; quarantineTime: float
; applyQuarantineOnBuying: Boolean
; respectQuarantine: Boolean
; quarantineAfterPositiveTest: Boolean
; jungtierzeit: float
; vaccinationTimeOfDefense: float

; Note that applyQuarantineOnBuying and respectQuarantine have both to be true for a trading event to take place.
; That is because there is a conditional at FarmManager.cpp dependent on the values of both the variables, which
; determines if the farm will be managed at all.
[containment]

strategies=strategy3


[strategy1]
; The values given in this strategy ([strategy1]) are also the default values for any custom strategy.
; This means that if they are not set to other values or are not defined, they will always be set in 
; the default values defined in BVDContainmentStrategy.cpp, which are identical to the ones defined here.
name=noMeasures
usesEartag=false
usesVaccination=false
usesJungtierFenster=false
startTime=0.0
bloodTestAccuracy=0.99
retestingTimeBlood=60.
vaccinationWorkingProbability=0.985
vaccinationTimeBeforeInsemination=42.
quarantineTime=40.
applyQuarantineOnBuying=false
respectQuarantine=true
quarantineAfterPositiveTest=true
jungtierzeit=186.
vaccinationTimeOfDefense=365.

[strategy2]
#note that the default values such as bloodTestAccuracy are set anyhow
name=eartag
usesEartag=true
startTime=10000.0
quarantineAfterPositiveTest=false


[strategy3]
name=newBVD
startTime=0.0
usesEartag=true
retestingTimeBlood =40.0
quarantineAfterPositiveTest=true


[strategy4]
usesEartag=true
usesVaccination=true
retestingTimeBlood=40.0
startTime=12373.0


[strategy5a]
usesEartag=true
retestingTimeBlood=40.0
usesJungtierFenster=true
startTime=0.0

[strategy5b]
usesEartag=true
retestingTimeBlood=40.0
usesJungtierFenster=true
jungtierzeit=365.0


[strategy6a]
usesEartag=true
retestingTimeBlood=40.0
usesJungtierFenster=true
usesVaccination=true
startTime=12373.0

[strategy6b]
usesEartag=true
retestingTimeBlood=40.0
usesJungtierFenster=true
usesVaccination=true
jungtierzeit=365.0

[strategy7]
startTime=12373.0
usesEartag=true
retestingTimeBlood=40.0
usesJungtierFenster=true

[strategy8]
#In this strategy, only compulsory vaccination will be used
startTime=0.0
usesEartag=false
retestingTimeBlood=40.0
usesJungtierFenster=false
usesVaccination=true
vaccinationWorkingProbability=1.0
vaccinationTimeBeforeInsemination=42.0

[strategy9]
#In this strategy, only compulsory vaccination will be used
startTime=0.0
usesEartag=false
retestingTimeBlood=40.0
usesJungtierFenster=false
usesVaccination=true
vaccinationWorkingProbability=1.0
vaccinationTimeBeforeInsemination=42.0
usesJungtierFenster=true

[strategy10]
; The values given in this strategy ([strategy1]) are also the default values for any custom strategy.
; This means that if they are not set to other values or are not defined, they will always be set in 
; the default values defined in BVDContainmentStrategy.cpp, which are identical to the ones defined here.
name=noMeasures
usesEartag=false
usesVaccination=false
usesJungtierFenster=false
startTime=12373.0
bloodTestAccuracy=0.99
retestingTimeBlood=60.
vaccinationWorkingProbability=0.985
vaccinationTimeBeforeInsemination=42.
quarantineTime=40.
applyQuarantineOnBuying=false
respectQuarantine=true
quarantineAfterPositiveTest=true
jungtierzeit=186.
vaccinationTimeOfDefense=365.


; This module concerns the format of the output files (see BVDSettings.cpp, AdvancedOutput.cpp and HDF5FileHandler.cpp). 
; The field "filetype" concerns the format of the output (possible keys are 
; "hdf5" and "sqlite"). The field "fileprefix" is the prefix of the output
; file. The field "mode" specifies whether the output shall be written in 
; one or multiple files (split_file or multi_file have the same result of writing
; the output on separate files every dt_output time steps. See the [simulation] module).
; The "path" field specifies the path where the output files shall be written. The specifier
; ("/" in UNIX-like systems, "\" in Windows) needs to be provided. Otherwise, the files shall be
; written in the bottom-level directory specified. Finally, the "overwrite" field (additionally Output.cpp, SQLiteHandler.cpp and FileHandler.cpp)
; seems to control whether the output file is going to be overwritten (only valid in mode=single_file mode) through its boolean value.
[output]
#default: hdf5 possible: hdf5, sqlite
filetype=hdf5
fileprefix=testing
; Also mode=multi_file and mode=single_file
mode=split_file
; path=/net/m07/nwg/hoevel_data/BVD_ABM_FLI_Scenarios/TH_ntw/Sensitivity_Analysis/
; path=/net/m07/nwg/hoevel_data/BVD_ABM_FLI_Scenarios/RP_to_TH_ntw/Scenario1_base/
; path=/net/m07/nwg/hoevel_data/BVD_ABM_FLI_Scenarios/BY_to_TH_ntw/Scenario1_base/
; path=/net/m07/nwg/hoevel_data/BVD_ABM_FLI_Scenarios/DE_to_TH_ntw/Scenario1_base/
path=/net/mickey/users/jbassett/Test_short/
overwrite=true
#postFileWriteCall=ls

; In this module the seed for the simulation's
; random number generator is chosen (System.cpp).
; The type of input is of unsigned integer, so as
; to generate a large number (complement of two and
; dependent on the running machine's architecture).
; The random number generator employed is the GSL's
; “Mersenne Twister” generator gsl_rng_mt19937 (the
; default generator) with a period of 2^19937 - 1 
; (about 10^6000). See the "Random number generator algorithms"
; of the GSL's website for the exact implementation. In 
; practise, the rule of thumb seems to be to choose 
; seeds (integers) in the order of 10^7-10^9. Different
; seeds should produce different sequences.
[rng]
seed=2333600960
